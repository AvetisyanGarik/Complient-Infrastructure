    - name: Ensure output directory exists
      ansible.builtin.file:
        path: "{{ output_dir }}"
        state: directory
        mode: '0755'
      delegate_to: localhost

    - name: Set golden config path
      ansible.builtin.set_fact:
        golden_config_path: "{{ golden_base_dir }}/{{ inventory_hostname }}.txt"
      delegate_to: localhost

    - name: Set show config command based on platform
      ansible.builtin.set_fact:
        show_config_cmd: >-
          {% if ansible_network_os == 'cisco.ios.ios' %}
            show running-config
          {% elif ansible_network_os == 'cisco.asa.asa' %}
            more system:running-config
          {% else %}
            show running-config
          {% endif %}

    - name: Get startup config from device
      ios_command:
        commands:
          - "{{ show_config_cmd }}"
      register: running_config

    - name: Read golden config from file
      ansible.builtin.slurp:
        src: "{{ golden_config_path }}"
      register: golden_config

    - name: Prepare and filter config lines
      ansible.builtin.set_fact:
        current_config_lines_raw: "{{ running_config.stdout[0] | split('\n') }}"
        golden_config_lines_raw: "{{ golden_config.content | b64decode | split('\n') }}"
    
    - name: Filter out irrelevant lines
      ansible.builtin.set_fact:
        current_config_lines: >-
          {{ current_config_lines_raw | reject('match', '^(!|Building configuration|^\\s*!|^\\s*$|.*Last configuration change.*)') | map('trim') | list }}
        golden_config_lines: >-
          {{ golden_config_lines_raw | reject('match', '^(!|Building configuration|^\\s*!|^\\s*$|.*Last configuration change.*)') | map('trim') | list }}

    - name: Determine if there are differences
      ansible.builtin.set_fact:
        has_diff: >-
          {{
            (golden_config_lines | difference(current_config_lines)) | length > 0
            or
            (current_config_lines | difference(golden_config_lines)) | length > 0
          }}

    - name: Render config diff using template
      ansible.builtin.template:
        src: templates/config_diff_report.j2
        dest: "/tmp/{{ inventory_hostname }}_config_diff.txt"
      when: has_diff
      delegate_to: localhost

    - name: Read rendered diff
      ansible.builtin.slurp:
        src: "/tmp/{{ inventory_hostname }}_config_diff.txt"
      register: rendered_diff
      when: has_diff
      delegate_to: localhost

    - name: Set config_diff_text
      set_fact:
        config_diff_text: "{{ rendered_diff.content | b64decode }}"
      when: has_diff

    - name: Save config diff file
      copy:
        dest: "{{ output_dir }}/{{ inventory_hostname }}_config_diff_{{ date_tag }}.txt"
        content: "{{ config_diff_text }}"
      when: has_diff
      delegate_to: localhost

    - name: Collect all diffs
      set_fact:
        all_diffs: "{{ groups['all'] | map('extract', hostvars, 'config_diff_text') | select('defined') | list }}"
      run_once: true

    - name: Render email body
      template:
        src: templates/email_body_report.j2
        dest: "/tmp/email_body.txt"
      run_once: true
      delegate_to: localhost

    - name: Read email body
      slurp:
        src: "/tmp/email_body.txt"
      register: email_body_raw
      run_once: true
      delegate_to: localhost

    - name: Set email body fact
      set_fact:
        email_body: "{{ email_body_raw.content | b64decode }}"
      run_once: true

    - name: Send email with config diffs
      ansible.builtin.mail:
        host: "{{ smtp_host }}"
        port: "{{ smtp_port }}"
        username: "{{ smtp_username }}"
        password: "{{ smtp_password }}"
        to: "{{ email_to }}"
        subject: "ðŸ›  Config Diff Report â€“ {{ date_tag }}"
        body: "{{ email_body }}"
        secure: always
        sender: root
        timeout: 20
        charset: utf-8
      run_once: true
      delegate_to: localhost